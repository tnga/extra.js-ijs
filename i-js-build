#!/usr/bin/env node

/*=================================================================================================================
 * Here, the script need *nodeJS* to run.
 * 
 * This script is for building iJS library from its partials sources; For that, the following operations are done:
 * building partials libraries from partials sources
 * concatenation of partials sources to make the library.
 * minifications. 
 * @TODO auto generate documentation with `jsdoc`. put available when it will be implemented.
 * @NOTE actualy, documentation is generated by externally running this command: node_modules/.bin/jsdoc -d docs -R README.md -r partials/
 *=================================================================================================================
 * @license LGPL v2.0 or later
 * @author  [Tindo Ngoufo Arsel](mailto:devtnga@gmail.com)
*/

if (process.argv.length >= 3) {

  console.log("iJS-builder: arguments aren't needed here!");
  console.log();
}


var fs = require('fs');
var uglifyJS = require("uglify-js");
var browserify = require('browserify') ;

function browserifyErrorExit(err) {

  if (err.stack) {
    console.error(err.stack);
  }
  else {
    console.error(String(err));
  }
  process.exit(1);
}

var iDevPath = {
  //representation of iJS globals features, its sources path and its output path.
  
    core: {
      
      src: "src/_i_core.js" ,
      out: "partials/i_core.js" ,
      min: "partials/i_core.min.js"
    },
    animation: {
      
      src: "src/_i_animation.js" ,
      out: "partials/i_animation.js" ,
      min: "partials/i_animation.min.js" 
    },
    gettext: {
      
      src: "src/_i_gettext.js" ,
      out: "partials/i_gettext.js" ,
      min: "partials/i_gettext.min.js"
    }
  } ;


console.log('building iJS library ...');

var partialBundle = null ,
    fullBundle = null ,
    minifyResult = null ,
    iDevConcat = browserify() ,
    minifyOpts = {
      outSourceMap: " " ,
      output: {
        comments: new RegExp('@preserve|@license|@cc_on|@author', 'i')
      }
    };

for (feature in iDevPath) {
  //to resume what it doing here: $ browserify *src-file* > *output-file*.
  
  partialBundle = browserify( iDevPath[ feature ].src ).bundle();
  partialBundle.on('error', browserifyErrorExit);
  partialBundle.pipe( fs.createWriteStream( iDevPath[ feature ].out ));
  
  iDevConcat.add( iDevPath[ feature ].src ) ;
}

fullBundle = iDevConcat.bundle() ;
fullBundle.on('error', browserifyErrorExit);
fullBundle.pipe( fs.createWriteStream("i.js"));

//because of asynchrone execution of some previous instructions, 
//minification have to be done at the end of the process.
process.on('exit', function(code) {
  
  if (code === 0) {
    
    console.log('making minification ...');

    for (feature in iDevPath) {
      //to resume what it doing here: $ minify *file* > *file.min*.

      minifyOpts.outSourceMap = iDevPath[ feature ].min + ".map" ;
      minifyResult = uglifyJS.minify( iDevPath[ feature ].out, minifyOpts) ;
      fs.writeFileSync( iDevPath[ feature ].min, minifyResult.code, "utf8");  // write minified output
      fs.writeFileSync( minifyOpts.outSourceMap, minifyResult.map, "utf8");  // write minified mapped output

    }

    minifyOpts.outSourceMap = "i.min.js.map" ;
    minifyResult = uglifyJS.minify( "i.js", minifyOpts) ;
    fs.writeFileSync( "i.min.js", minifyResult.code, "utf8");  // write minified output
    fs.writeFileSync( minifyOpts.outSourceMap, minifyResult.map, "utf8");  // write minified mapped output

    console.log('... done.');
    
  } else {
    
    console.log('... canceling minification');
    console.log('...it seems like process haven\'t ended properly.');
  }
  
});